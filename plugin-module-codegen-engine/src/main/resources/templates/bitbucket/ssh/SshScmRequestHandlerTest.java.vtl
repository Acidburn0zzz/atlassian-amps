package ${PACKAGE};

import com.atlassian.bitbucket.scm.ssh.ExitCodeCallback;
import com.atlassian.bitbucket.scm.ssh.SshScmRequest;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.io.InputStream;
import java.io.OutputStream;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.assertNull;

import ${FQ_CLASS_UNDER_TEST};
import ${FQ_REQUEST_CLASSNAME};

@RunWith(MockitoJUnitRunner.class)
public class ${CLASSNAME}
{

    @Mock
    private ExitCodeCallback exitCodeCallback;
    @Mock
    private InputStream in;
    @Mock
    private OutputStream out;
    @Mock
    private OutputStream error;
    private ${CLASS_UNDER_TEST} sshRequestHandler;

    @Before
    public void setup()
    {
        sshRequestHandler = new ${CLASS_UNDER_TEST}();
    }

    @Test
    public void echo()
    {
        assertCommandMatches("echo");
        assertCommandMatches("eChO");
    }

    @Test
    public void notEcho()
    {
        assertNull(createSshRequest("fishsticks"));
    }

    private void assertCommandMatches(String command)
    {
        assertThat(createSshRequest(command), instanceOf(${REQUEST_CLASSNAME}.class));
    }

    private SshScmRequest createSshRequest(String command)
    {
        return sshRequestHandler.create(command, in, out, error, exitCodeCallback);
    }

}
