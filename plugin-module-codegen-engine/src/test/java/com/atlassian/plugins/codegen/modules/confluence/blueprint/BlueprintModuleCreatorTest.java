package com.atlassian.plugins.codegen.modules.confluence.blueprint;

import com.atlassian.plugins.codegen.AbstractModuleCreatorTestCase;
import com.atlassian.plugins.codegen.PluginProjectChangeset;
import com.atlassian.plugins.codegen.ResourceFile;
import com.atlassian.plugins.codegen.modules.AbstractNameBasedModuleProperties;
import com.atlassian.plugins.codegen.modules.common.Resource;
import com.atlassian.plugins.codegen.modules.common.web.WebItemProperties;
import com.atlassian.plugins.codegen.modules.common.web.WebResourceProperties;
import com.atlassian.plugins.codegen.modules.common.web.WebResourceTransformation;
import com.atlassian.plugins.codegen.modules.common.web.WebResourceTransformerProperties;
import com.google.common.collect.Lists;
import org.dom4j.Element;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static com.atlassian.plugins.codegen.modules.confluence.blueprint.BlueprintProperties.INDEX_KEY;
import static com.atlassian.plugins.codegen.modules.confluence.blueprint.BlueprintProperties.WEB_ITEM_BLUEPRINT_KEY;
import static org.hamcrest.Matchers.containsString;
import static org.junit.Assert.*;

/**
 * @since 4.1.7
 */
public class BlueprintModuleCreatorTest extends AbstractModuleCreatorTestCase<BlueprintProperties>
{
    // The Properties under test
    private BlueprintProperties blueprintProps;

    // The expected values for the Properties and created plugin content
    private String blueprintModuleKey;
    private String blueprintModuleName;
    private String blueprintIndexKey;
    private String webItemName;
    private String webItemDesc;
    private String templateModuleKey;
    private String templateNameI18nKey;
    private String templateName;
    private String templateDescI18nKey;
    private String templateDesc;
    private String templateResourceName = "template";
    private String templateResourceType = "download";
    private String templateResourceLocation;
    private String templateContentI18nKey = "template.content.key";
    private String templateContentValue = "Template Content Here";
    private String webItemModuleKey;
    private String webItemNameI18nKey;
    private String webItemDescI18nKey;
    private String webItemResourceName = "icon";
    private String webItemResourceType = "download";
    private String webItemResourceLocation;
    private String webItemSection;

    public BlueprintModuleCreatorTest()
    {
        super("blueprint", new BlueprintModuleCreator());
    }

    @Before
    public void setupProps() throws Exception
    {
        blueprintProps = createBaseBlueprintProperties();
        setProps(blueprintProps);
    }

    /**
     * Common properties for all tests - creates the most basic combination of blueprint, content-template and
     * web-item elements / resources that will result in a browser-testable Blueprint.
     */
    private BlueprintProperties createBaseBlueprintProperties()
    {
        // Set up properties generated by the BlueprintPrompter. Note that some are user-entered and some are
        // generated by the prompter, so the prompter will need Unit tests confirming that each of these values is set
        // in the BlueprintProperties correctly.
        blueprintModuleKey = "foo-print-blueprint";
        blueprintModuleName = "FooPrint Blueprint";
        blueprintIndexKey = "foo-print";

        webItemName = "FooPrint";
        webItemDesc = "There's no Blueprint like my FooPrint.";

        templateModuleKey = "foo-plate";
        templateNameI18nKey = "template.name.i18n.key";
        templateName = "FooPrint Content Template 0";
        templateDescI18nKey = "template.desc.i18n.key";
        templateDesc = "Contains Storage-format XML used by the FooPrint Blueprint";
        templateResourceLocation = "xml/my-template.xml";

        webItemModuleKey = "foo-print-item";
        webItemNameI18nKey = "foo-print-blueprint.display.name.i18n.key";
        webItemDescI18nKey = "foo-print-blueprint.display.desc.i18n.key";
        webItemSection = "system.create.dialog/content";
        webItemResourceLocation = "my/web-item/icon/path";

        BlueprintProperties blueprintProps = new BlueprintProperties();
        blueprintProps.setModuleKey(blueprintModuleKey);
        blueprintProps.setModuleName(blueprintModuleName);
        blueprintProps.setProperty(INDEX_KEY, blueprintIndexKey);
        blueprintProps.setWebItem(makeWebItemProperties());
        blueprintProps.addContentTemplate(makeContentTemplateProperties());

        return blueprintProps;
    }

    @After
    public void tearDown()
    {
        blueprintProps = null;
        changeset = null;
    }

    @Test
    public void blueprintModuleBasicSettings() throws Exception
    {
        Element blueprintModule = getGeneratedModule();
        assertNodeText(blueprintModule, "@key", blueprintModuleKey);
        assertNodeText(blueprintModule, "@name", blueprintModuleName);
        assertNodeText(blueprintModule, "@index-key", blueprintIndexKey);
        assertNodeText(blueprintModule, "content-template/@ref", templateModuleKey);

        // TODO - assert i18n name and desc
    }

    @Test
    public void contentTemplateModuleBasicSettings() throws Exception
    {
        Element templateModule = getGeneratedModule("content-template");
        assertNodeText(templateModule, "@key", templateModuleKey);
        assertNodeText(templateModule, "@i18n-name-key", templateNameI18nKey);
        assertNodeText(templateModule, "description/@key", templateDescI18nKey);

        assertNodeText(templateModule, "resource/@name", templateResourceName);
        assertNodeText(templateModule, "resource/@type", templateResourceType);
        assertNodeText(templateModule, "resource/@location", templateResourceLocation);

        assertI18nString(templateNameI18nKey, templateName);
        assertI18nString(templateDescI18nKey, templateDesc);
    }

    @Test
    public void contentTemplateFileIsCreated() throws Exception
    {
        ResourceFile file = getResourceFile("xml", "my-template.xml");
        String xml = new String(file.getContent());
        assertThat(xml, containsString(templateContentI18nKey));
        assertI18nString(templateContentI18nKey, templateContentValue);
    }

    @Test
    public void webItemModuleBasicSettings() throws Exception
    {
        Element module = getGeneratedModule("web-item");
        assertNameBasedModuleProperties(module, blueprintProps.getWebItem());
        assertNodeText(module, "@key", webItemModuleKey);
        assertNodeText(module, "@i18n-name-key", webItemNameI18nKey);
        assertNodeText(module, "@section", webItemSection);
        assertNodeText(module, "description/@key", webItemDescI18nKey);
        assertNodeText(module, "param/@name", WEB_ITEM_BLUEPRINT_KEY);
        assertNodeText(module, "param/@value", blueprintModuleKey);

        assertNodeText(module, "resource/@name", webItemResourceName);
        assertNodeText(module, "resource/@type", webItemResourceType);
        assertNodeText(module, "resource/@location", webItemResourceLocation);

        assertI18nString(webItemNameI18nKey, webItemName);
        assertI18nString(webItemDescI18nKey, webItemDesc);
    }

    @Test
    public void webItemIconIsCreated() throws Exception
    {
        // Check the content of the generated icon file
        // TODO - BAD! The icon should be specified in a CSS resource file! We should generate a stub for the CSS
        // selector that allows a) the default icon to be used if not specified b) the plugin dev to add a data-url.
    }

    @Test
    public void howToUseTemplateIsAdded() throws Exception
    {
        // TODO - still need a tested util class to generate these strings! dT
        String soyNamespace = "Confluence.Blueprints.Plugin." + webItemName.replaceAll("\\W", "");
        String template = soyNamespace + ".howToUse";
        blueprintProps.setHowToUseTemplate(template);

        WebResourceProperties webResource = makeWebResourceProperties();
        blueprintProps.setWebResource(webResource);

        // 1. The blueprint element should have a new attribute with the how-to-use template reference
        Element blueprintModule = getGeneratedModule();
        assertNodeText(blueprintModule, "@how-to-use-template", template);

        // 2. There should be a Soy file containing the referenced template
        String soy = new String(getResourceFile("soy", "my-templates.soy").getContent());
        assertThat(soy, containsString("{namespace " + soyNamespace + "}"));
        assertThat(soy, containsString("{template .howToUse}"));

        // 3. There should be a web-resource pointing to the new file
        Element webResourceModule = getGeneratedModule("web-resource");
        assertWebResource(webResourceModule, webResource);

        // 4. There should new entries in the i18n file for the template
//        assertI18nString(howToUseContentI18nKey, howToUseContentValue);

        // TODO - 5. There should (?) be CSS rules for the template
    }

    private void assertWebResource(Element element, WebResourceProperties resourceProperties)
    {
        assertNameBasedModuleProperties(element, resourceProperties);

        // TODO - not sure how best to test here. There should be a unit test confirming that transformations get
        // rendered to XML correctly, but other than that THIS test just needs to confirm that our BlueprintCreator is
        // in fact adding WebResources that do have the correct transformation. Hmm, that's more of a test for the
        // Prompter? Or the generator?
        assertNotNull(element.selectSingleNode("transformation"));
    }

    private void assertNameBasedModuleProperties(Element element, AbstractNameBasedModuleProperties props)
    {
        assertNodeText(element, "@key", props.getModuleKey());
        assertNodeText(element, "@name", props.getModuleName());
        assertNodeText(element, "@i18n-name-key", props.getNameI18nKey());
        assertNodeText(element, "description/@key", props.getDescriptionI18nKey());
        assertNodeText(element, "description/@key", props.getDescription());
    }

    private WebResourceProperties makeWebResourceProperties()
    {
        WebResourceProperties properties = new WebResourceProperties();

        // Basic module properties
        properties.setModuleKey("foo-print-resource");
        properties.setModuleName("FooPrint Web Resources");
        properties.setNameI18nKey("foo-print.web-resources.name");
        properties.setDescription("Provides JS, CSS and Soy resources for the FooPrint Blueprint");
        properties.setDescriptionI18nKey("foo-print.web-resources.desc");

        // Soy transformer
        WebResourceTransformation transformation = new WebResourceTransformation("soy");
        WebResourceTransformerProperties transformer = new WebResourceTransformerProperties();
        transformer.setModuleKey("soyTransformer");
        transformer.addFunctions("com.atlassian.confluence.plugins.soy:soy-core-functions");
        transformation.addTransformer(transformer);
        properties.addTransformation(transformation);

        // TODO - this property generation should be done by that BlueprintPropertiesGenerator util class. dT
        Resource soyResource = new Resource();
        // <resource type="download" name="templates-soy.js" location="com/atlassian/confluence/plugins/hello_blueprint/soy/templates.soy" />
        soyResource.setType("download");
        soyResource.setName("templates-soy.js");
        soyResource.setLocation("soy/templates.soy");
        properties.addResource(soyResource);
        
        properties.addDependency("com.atlassian.confluence.plugins.confluence-create-content-plugin:resources");
        
        properties.addContext("atl.general");
        properties.addContext("atl.admin");

        return properties;
    }

    // Not sure why the changeset isn't always being cached during the test? Pull request comment please :) dT
    @Override
    protected PluginProjectChangeset getChangesetForModule() throws Exception
    {
        if (changeset == null)
        {
            changeset = super.getChangesetForModule();
        }
        return changeset;
    }

    private void assertNodeText(Element element, String nodePath, String expectedText)
    {
        assertEquals(expectedText, getText(element, nodePath));
    }

    private String getText(Element element, String nodePath)
    {
        return element.selectSingleNode(nodePath).getText();
    }

    // I prefer this method name - getI18nString doesn't indicate that an Assert is being done. dT
    private void assertI18nString(String i18nKey, String value) throws Exception
    {
        getI18nString(i18nKey, value);
    }

    private WebItemProperties makeWebItemProperties()
    {
        WebItemProperties webItem = new WebItemProperties();
        webItem.setModuleKey(webItemModuleKey);
        webItem.setNameI18nKey(webItemNameI18nKey);
        webItem.setModuleName(webItemName);
        webItem.setDescriptionI18nKey(webItemDescI18nKey);
        webItem.setDescription(webItemDesc);
        webItem.setSection(webItemSection);
        Resource webItemResource = new Resource();
        webItemResource.setName(webItemResourceName);
        webItemResource.setType(webItemResourceType);
        webItemResource.setLocation(webItemResourceLocation);
        List<Resource> resources = Lists.newArrayList(webItemResource);
        webItem.setResources(resources);
        webItem.addParam(WEB_ITEM_BLUEPRINT_KEY, blueprintModuleKey);
        return webItem;
    }

    private ContentTemplateProperties makeContentTemplateProperties()
    {
        // TODO - should the ContentTemplateProperties accept the plugin/package and attempt to generate the
        // i18n keys itself? If so, thta logic would be tested in the Properties object (or a "generator" helper for it).
        // TODO - should probably contact Jonathan Dok for this.
        ContentTemplateProperties template = new ContentTemplateProperties(templateModuleKey);
        template.setNameI18nKey(templateNameI18nKey);
        template.setModuleName(templateName);
        template.setDescriptionI18nKey(templateDescI18nKey);
        template.setDescription(templateDesc);
        Resource templateResource = new Resource();
        templateResource.setName(templateResourceName);
        templateResource.setType(templateResourceType);
        templateResource.setLocation(templateResourceLocation);
        template.addResource(templateResource);
        template.setContentText(templateContentI18nKey, templateContentValue);
        return template;
    }
}
